
1. What is an HTTP Request?
---------------------------------------------------------------------------------|
An HTTP request is a message sent by a client (like a web browser or an API      |
client) to a server, asking for data or performing an action. The server then    |
processes the request and sends back an HTTP response.                           |
																				 |
HTTP (Hypertext Transfer Protocol) is the foundation of web communication.       |
---------------------------------------------------------------------------------|

2. Basic Structure of an HTTP Request
---------------------------------------------------------------------------------|
																				 |
An HTTP request consists of:                                                     |
																				 |
	1- Request Line → Contains the method, URL, and HTTP version.                |
																				 |
	2- Headers → Additional information about the request.                       |
																				 |
	3- Body (Optional) → Used for sending data in methods like POST and PUT      |
																				 |
	Example HTTP Request:                                                        |
                                                                                 |
	GET /index.html HTTP/1.1                                                     |
	Host: www.example.com                                                        |
	User-Agent: Mozilla/5.0                                                      |
	Accept: text/html                                                            |
---------------------------------------------------------------------------------|


3. HTTP Methods (Verbs)
---------------------------------------------------------------------------------|




_______________________________________________________________________________________________________________________
--------------
What is HTTP?
--------------
	The Hypertext Transfer Protocol (HTTP) is an application-level protocol used 
	to deliver data (HTML files, image files, query results, etc.) over web. It establishes 
	communication between clients and servers.

-----------------------------------------------
Explain the difference between HTTP and HTTPS.
-----------------------------------------------
The major difference between HTTPS(Hypertext Transfer Protocol Secure) and 
HTTP(Hypertext Transfer Protocol) is that HTTPS encrypts the data using TLS/SSL 
making the communication more secure whereas HTTP transmits data in plain text without encryptio

-------------------------------
What are HTTP request methods?
-------------------------------
HTTP request methods are actions that specifies operations to be performed on the resource identified
by the given Request-URI. HTTP request methods used are : GET, POST, PUT, DELETE, HEAD, and OPTIONS.

---------------------------
What are HTTP status codes?
---------------------------
HTTP status codes represents status of HTTP requests. Common HTTP status codes are: 200(OK),
 404(Not Found), 500(Internal Server Error)

------------
What is URI?
------------
URI stands for Uniform Resource Identifier. It is a string used to uniquely identify resources on the internet.

-----------------------
What is caching in HTTP?
------------------------
Caching in HTTP improves the performance and reduces server load as it stores the copies of responses on client's
 device or server to reuse them for future requests rather than fetching them again and again.

---------------------------------
What is the role of HTTP headers?
----------------------------------
HTTP headers is used to provide the metadata about requests and responses such as type of content, caching 
instructions, cookie information and many more.
_______________________________________________________________________________________________________________________

=============================================================
=============================================================
=============================================================
=============================================================
=============================================================

help me to find a good structor to build my own webserv (project in 1337 school):

This project implements a single-threaded HTTP server similar to nginx. The server uses multiplexing to handle multiple connections efficiently and leverages various system calls and functions to manage processes, sockets, and file descriptors.

The 42 webserver project is all about building your own web server from scratch, specifically in C++98. It's a chance to dive deep and understand the inner workings of what powers websites. Here's some of what we should accomplish:

Core Functionality: Develop a functional HTTP server that can handle incoming requests and deliver responses. This includes parsing HTTP methods (GET, POST, DELETE), processing headers, and sending back appropriate response.

Static Content Serving: Configure your server to locate and serve static files like HTML, CSS, videos, and images, forming the basic building blocks of webpages.

Non-Blocking Operations: Implement the server using a non-blocking approach, allowing it to handle multiple client connections concurrently without getting bogged down by a single request. This is typically achieved using poll() or similar techniques.

Configuration: The server should be able to read configuration files that define settings like port number, root directory for static files, and additional functionalities.

--------------------------------

i have :

Rquest.hpp, Rquest.cpp

Response.hpp, Response.cpp

Config.hpp, Config.cpp

Server.hpp, Server.cpp

CGI.hpp, CGI.cpp

Client.hpp, Client.cpp

and main.c

give me a good structor to build this project 

the request http can incoming by part but in request parse we 
don't wait intel read all part of request to start parse. no we 
read and parse in same time if we find \r\n we go to parse for 
first line and then for the header and body at the next.