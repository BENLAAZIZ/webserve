

âœ… 1. HTTP (HyperText Transfer Protocol)

A request-response protocol used for communication between clients (like browsers) and servers over the web.

--> It defines methods like GET, POST, DELETE, etc.

--> WebServ is an HTTP/1.1 compliant server.

âœ… 2. RFCs

-->  "Request for Comments" â€” official documents that define how internet protocols should work.

-----------------------
For WebServ, key RFCs:
-----------------------
RFC 7230: HTTP/1.1 message syntax and routing

RFC 2616: Legacy HTTP/1.1

RFC 3875: CGI
------------------------

âœ… 3. Socket

A socket is an endpoint for communication between two machines.

* Created using socket(), bind(), listen(), accept()

* In WebServ, sockets let you accept incoming connections from clients.

âœ… 4. Server

A process that listens for client requests and serves responses.

---> Your webserv listens on a port (e.g. 8080) and handles requests.


âœ… 5. Client

The user or tool (like a browser or curl) that sends a request to a server.

âœ… 6. HTTP Methods

Method    -    What it does
GET       -    Retrieve resource
POST      -    Send data to the server (form upload, etc.)
DELETE    -    Remove a resource

âœ… 7. CGI (Common Gateway Interface)

A way to run scripts (like PHP or Python) from the server.

=> CGI executes external programs and returns the output as HTTP response.

=> WebServ must support .php and .py via CGI.

âœ… 8. Config File

Describes server blocks, ports, roots, locations, methods, and error pages.

===============================================================================================

ðŸ§  Q1: What is a socket and how is it used?
-------------------------------------------

âœ… A: A socket is a communication endpoint. The server uses socket(), bind(), listen(), and accept() to handle connections from clients.

ðŸ§  Q2: Whatâ€™s the difference between GET, POST, and DELETE?
-----------------------------------------------------------

âœ… A:

---> GET: Asks for data from the server.

---> POST: Sends data (e.g. forms) to be processed.

---> DELETE: Requests to delete a resource on the server.

ðŸ§  Q3: What is CGI, and how did you implement it?
---------------------------------------------------

âœ… A: CGI is a protocol for running external scripts. We used fork() and execve() to run .php or .py files, 
passing environment variables like REQUEST_METHOD, PATH_INFO, etc.

ðŸ§  Q4: How did you parse and route requests?
---------------------------------------------------

âœ… A: We parsed HTTP headers line by line, matched the path to a location in the config, validated the method,
 and built the file path to serve or execute.

ðŸ§  Q5: How do you handle errors (403, 404, etc.)?
---------------------------------------------------

âœ… A: If a file isnâ€™t found, or the method isnâ€™t allowed, we set the proper status code (like 403 or 404) 
and serve a custom error page defined in the config.

ðŸ§  Q6: What is the purpose of the config file?
---------------------------------------------------

âœ… A: The config file allows defining servers, ports, roots, allowed methods, error pages, upload directories, and CGI settings dynamically.

ðŸ§  Q7: How does autoindex work?
---------------------------------------------------

âœ… A: If a directory is requested and no index is found, and autoindex is on, we generate an HTML listing of files in the directory.

ðŸ§  PART 3: Why This Project Is Important
---------------------------------------------------

âœ… ðŸ”§ You built your own HTTP server from scratch.
That means:

--> Parsing raw TCP data

--> Handling real-world protocols

--> Supporting file uploads, deletions, and dynamic scripts (CGI)

